name: Review Lockfile Updates

on:
  pull_request:
    branches: ['*']
    paths:
    - 'chart-locks.json'

concurrency:
  # Prevent parallel executions of this and related tasks.
  group: updating-chart-locks
  cancel-in-progress: false

env:
  # APPROVED_ACTOR is the GitHub user that can submit lockfile update PRs
  APPROVED_ACTOR: komish-impersonator

jobs:
  confirm-valid-lockfile-update:
    runs-on: ubuntu-latest
    steps:
    - name: Validate PR comes from Bot
      uses: actions/github-script@v6
      with:
        script: |
          const pr = await github.rest.pulls.get({
            repo: context.repo.repo,
            owner: context.repo.owner,
            pull_number: context.issue.number,
          });

          const prContributor = pr.data.user.login;
          
          if ( prContributor !== '${{ env.APPROVED_ACTOR }}') {
            core.setFailed(`User ${prContributor} cannot submit this PR. Approved actor is ${{ env.APPROVED_ACTOR }}`)
            return 1
          }
    - name: Label PR with automation label
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            repo: context.repo.repo,
            owner: context.repo.owner,
            labels: ['automation']
          })

    - name: Ensure only a single file has been modified (sanity)
      # Sanity check. This action should only trigger when the specified file
      # is changed and no others, but this makes sure that only a single file was changed.
      uses: actions/github-script@v6
      id: read-pr-file-list
      with:
        script: |
          const listFilesResp = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });

          if (listFilesResp['data'].length > 1) {
            core.setFailed(`This PR has modified more than one file. This automation expects only a single update.`)
            return 1
          }
  sanity-check-contents:
    needs:
      - confirm-valid-lockfile-update
    runs-on: ubuntu-latest
    steps:
      - name: Pull PR
        uses: actions/checkout@v4
      - name: Pull base branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: base-branch
      - name: Determine previous count of packages
        id: get-previous-package-count
        run: |
          pwd; ls -lah
          length=$(jq '.packages | length ' < base-branch/docs/lock.json )
          echo previous-package-count=$length >> $GITHUB_OUTPUT
      - name: Determine new count of packages
        id: get-new-package-count
        run: |
          length=$(jq '.packages | length ' < docs/lock.json )
          echo new-package-count=$length >> $GITHUB_OUTPUT
      - name: Ensure the difference is only a single package
        uses: actions/github-script@v6
        # No PR generated by automation should be adding multiple packages in
        # one swing, or needs to remove packages, then they should do so
        # manually.
        with:
          script: |
            const packageChange = ${{ steps.get-new-package-count.outputs.new-package-count }} - ${{ steps.get-previous-package-count.outputs.previous-package-count }};
            if (packageChange !== 1) {
              core.setFailed(`We only expect to gain a single package per PR. The package change count was: "${packageChange}"`)
              return 1
            }
      - name: Indicate approval
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              repo: context.repo.repo,
              owner: context.repo.owner,
              labels: ['automation-lgtm']
            })

  approve-and-merge:
    runs-on: ubuntu-latest
    needs: 
      - sanity-check-contents
    if: needs.sanity-check-contents.result == 'success'
    steps:
      - name: Pull base branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
      - name: Approve and Merge PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr review --approve --body "LGTM!" ${{ github.event.number }}
          gh pr merge --squash ${{ github.event.number }}
